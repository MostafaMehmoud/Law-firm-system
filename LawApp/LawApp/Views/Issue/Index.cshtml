@using Law.CORE.Entities
@using Law.CORE.ViewModels
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@{
    var currentUser = await UserManager.GetUserAsync(User);
}
@model UpdateIssue


<style>
    .custom-input {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }

    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.6rem;
        font-size: 0.85rem;
    }

    .custom-form-group {
        margin-bottom: 0.4rem;
    }

    .card-header {
        padding: 0.5rem 1rem;
    }

    .form-label {
        font-size: 0.85rem;
        font-weight: 600;
    }

    .form-control-sm {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }
</style>
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="d-flex m-3 justify-content-between">
            <div class="m-0">
                <h1 class="card-title text-dark font-weight-bold fs-2">القضايا</h1>
            </div>

            @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.View || currentUser.Level == UserLevels.EditAdd)
            {
                <div class="d-flex justify-content-end navigation-buttons">
                    <div class="btn btn-primary btn-sm custom-button" id="btnMin">
                        <i class="fa fa-angle-double-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnPrevious">
                        <i class="fa fa-angle-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnNext">
                        <i class="fa fa-angle-left"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnMax">
                        <i class="fa fa-angle-double-left"></i>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-end navigation-buttons">
                </div>
            }
          
              
           

        </div>

        <div class="card-body">
            <form id="IssueForm" class="forms-sample">
                <!-- Hidden field for ID -->
                <input type="hidden" id="IssueId" asp-for="Id" />
                <!-- صفوف الحقول -->
                <div class="row row-cols-2 g-2">
                    <div class="col-2">
                        <label class="form-label">كود </label>
                        <input id="IssueCodeInput" disabled type="number" class="form-control form-control-sm" placeholder="ادخل كود القضية">
                    </div>
                    <div class="col-10">
                        <label class="form-label">مسمي القضية</label>
                        <input id="IssueNameInput" type="text" class="form-control form-control-sm" placeholder="ادخل مسمي القضية">
                    </div>
                </div>
                <div class="form-group custom-form-group">

                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.Add || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-success btn-sm custom-button" id="btnAdd">حفظ</button>
                    }
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-secondary btn-sm custom-button" id="btnEdit">تعديل</button>
                        <button type="button" class="btn btn-danger btn-sm custom-button" id="btnDelete">حذف</button>
                    }
             

        </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- SweetAlert2 for alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {
            // On page load, get the next available code from the server
            $.ajax({
                url: '@Url.Action("GetNextIssueCode", "Issue")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#IssueCodeInput').val(response.nextCode);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error retrieving the next code:", errorThrown);
                }
            });
                    $("#btnDelete").click(function () {
            // Get the record's ID from a hidden field or another element
            var id = $("#IssueId").val();
            if (!id) {
                Swal.fire("تنبيه", "Please select a record first.", "warning");
                return;
            }

            // Show confirmation dialog
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لن تتمكن من التراجع عن هذا الإجراء!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'نعم، احذفها!',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    // If confirmed, send the delete request
                    $.ajax({
                        url: '@Url.Action("DeleteIssue", "Issue")',
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            // Assuming your API returns a success message (you can modify as needed)
                            Swal.fire("تم الحذف!", response.success, "success").then(function () {
                                location.reload();
                            });
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            Swal.fire("خطأ", "Error deleting data: " + errorThrown, "error");
                        }
                    });
                }
            });
        });

            // Handler for the Add button
            $("#btnAdd").click(function () {
                var code =parseInt( $('#IssueCodeInput').val());
                var name = $('#IssueNameInput').val();
                var errors = "";

                // Client-side validation
                if (!name || name.trim() === "") {
                    errors += "اسم القضية مطلوب<br/>";
                }
                if (name && name.length > 100) {
                    errors += "لا يمكن أن يتجاوز الاسم 100 حرف<br/>";
                }
                if (errors !== "") {
                    Swal.fire('خطأ', errors, 'error');
                    return; // Stop processing if validation fails
                }

                var IssueData = {
                    Code: code,
                    Name: name
                };

                // AJAX call for AddIssue
                $.ajax({
                    url: '@Url.Action("AddIssue", "Issue")',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8', // Ensure server accepts JSON
                    data: JSON.stringify(IssueData),
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            Swal.fire('نجاح', response.message, 'success').then(function () {
                                location.reload();
                            });
                        } else {
                            Swal.fire('خطأ', response.message, 'error');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        var errors = "";
                        var responseErrors = jqXHR.responseJSON;
                        if (responseErrors) {
                            $.each(responseErrors, function (key, value) {
                                errors += value.join("<br/>") + "<br/>";
                            });
                        } else {
                            errors = errorThrown;
                        }
                        Swal.fire('خطأ', errors, 'error');
                    }
                });
            });

            // Handler for the Edit button
            $("#btnEdit").click(function () {
                var id =parseInt($("#IssueId").val());
                var code =parseInt($('#IssueCodeInput').val());
                var name = $('#IssueNameInput').val();
                var errors = "";

                // Client-side validation:
                if (!name || name.trim() === "") {
                    errors += "اسم المرحلة الدراسية مطلوب<br/>";
                }
                if (name && name.length > 100) {
                    errors += "لا يمكن أن يتجاوز الاسم 100 حرف<br/>";
                }
                if (errors !== "") {
                    Swal.fire('خطأ', errors, 'error');
                    return;
                }

                var IssueData = {
                    Id: id,
                    Code: code,
                    Name: name
                };

                // AJAX call for EditIssue
                $.ajax({
                    url: '@Url.Action("EditIssue", "Issue")',
                    type: 'POST',
                    data: JSON.stringify(IssueData),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            Swal.fire('نجاح', response.message, 'success').then(function () {
                                location.reload();
                            });
                        } else {
                            Swal.fire('خطأ', response.message, 'error');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        var errors = "";
                        var responseErrors = jqXHR.responseJSON;
                        if (responseErrors) {
                            $.each(responseErrors, function (key, value) {
                                errors += value.join("<br/>") + "<br/>";
                            });
                        } else {
                            errors = errorThrown;
                        }
                        Swal.fire('خطأ', errors, 'error');
                    }
                });
            });

            // Handler for the Min button (gets record with minimum code)
            $("#btnMin").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMinIssue", "Issue")',
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                        $("#IssueId").val(response.id);
                        $("#IssueCodeInput").val(response.code);
                        $("#IssueNameInput").val(response.name);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching min Issue:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Max button (gets record with maximum code)
            $("#btnMax").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMaxIssue", "Issue")',
                        dataType: "json"
                    });
                    if (response) {
                        $("#IssueId").val(response.id);
                        $("#IssueCodeInput").val(response.code);
                        $("#IssueNameInput").val(response.name);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching max Issue:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Previous button
            $("#btnPrevious").click(async function () {
                const IssueId =$("#IssueId").val();
                // console.log(IssueId);

                // console.log(typeof(+IssueId));
                // if (+IssueId!==0) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetPreviousIssue", "Issue", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", +IssueId),
                        dataType: "json"
                    });
                    if (response) {
                        $("#IssueId").val(response.id);
                        $("#IssueCodeInput").val(response.code);
                        $("#IssueNameInput").val(response.name);
                    } else {
                        Swal.fire("تنبيه", "No previous record found.", "info");
                    }
                } catch (error) {
                     // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد القضية قبل تلك", "info");
        } else {
            console.error("Error fetching previous Issue:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

            // Handler for the Next button
            $("#btnNext").click(async function () {
                const IssueId =parseInt( $("#IssueId").val());
                // console.log(IssueId);
                // console.log(typeof(IssueId));
                // if (+IssueId!==0) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetNextIssue", "Issue", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", +IssueId),
                        dataType: "json"
                    });
                    if (response) {

                        $("#IssueId").val(response.id);
                        $("#IssueCodeInput").val(response.code);
                        $("#IssueNameInput").val(response.name);
                    } else {
                        Swal.fire("تنبيه", "No next record found.", "info");
                    }
                } catch (error) {
                    // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد القضية بعد تلك.", "info");
        } else {
            console.error("Error fetching previous Issue:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });
        });
    </script>
}